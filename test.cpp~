#include <include/tileMapper.hpp>
#include <iostream>
#include <include/randomNum.hpp>
#include <include/pathFinding.hpp>
// #include <thread>

int main()
{
	int width = 1200;
	int height = 650;
	bool shouldKeepLooking = true;
	int tileSize = 30;
	// std::cin >> tileSize;

	std::vector<std::vector<int>> level;
	std::tuple<std::pair<int, int>, int, int, int> positionValueTuple;
	std::vector<std::tuple<std::pair<int, int>, int, int, int>> positionValueTuplesVector;

	for (int y = 0; y < height / tileSize; y++)
	{
		std::vector<int> yVector;
		for (int x = 0; x < width / tileSize; x++)
		{
			if (getRandomNum(1, 6) == 1)
			{
				yVector.push_back(255);
			}
			else
			{
				yVector.push_back(0);
			}
		}
		level.push_back(yVector);
	}

	// create the tilemap from the level definition
	TileMap map;
	map.screenHeight = height;
	map.screenWidth = width;
	map.tileSize = tileSize;
	map.tileset = "DwarfFortressTileset.png";

	level[0][0] = 1;
	level[level.size() - 1][level[0].size() - 1] = 2;

	// draw posible tiles
	// auto thisThing = positionValueTuplesVector.begin();

	if (!map.buildTilemap(level))
		return -1;

	singleCallPathing(level, pair<int, int>(0, 0), pair<int, int>(level.size() - 1, level[0].size() - 1));

	// create the window
	sf::RenderWindow window(sf::VideoMode(width, height), "Tilemap");

	// run the main loop
	while (window.isOpen())
	{
		// handle events
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
			{
				window.close();
			}
			// else if (event.type == sf::Event::KeyPressed)
			// {
			// if (event.key.code == sf::Keyboard::Space)
			// {
			//     positionValueTuplesVector = pathing(level, positionValueTuplesVector);
			//     for (auto i : positionValueTuplesVector)
			//     {
			//         level[get<0>(i).first][get<0>(i).second] = 7;
			//     }
			//     if (!map.buildTilemap(level))
			//         return -1;
			// }
			// }
		}
		window.clear();
		for (auto y : map.thisTileMap)
		{
			for (auto x : y)
			{
				window.draw(x);
			}
		}
		window.display();
	}

	return 0;
}